package listener;


import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Enumeration;
import java.util.logging.Logger;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.annotation.WebListener;



/**
 * Application Lifecycle Listener implementation class ServletContextListener
 *
 */
@WebListener
public class ServletContextListener implements javax.servlet.ServletContextListener {
	
	private static final Logger logger = Logger.getLogger(ServletContextListener.class.getName());
	
	

    /**
     * Default constructor. 
     */
    public ServletContextListener() {
        // TODO Auto-generated constructor stub
    }

	/**
     * @see ServletContextListener#contextInitialized(ServletContextEvent)
     */
    public void contextInitialized(ServletContextEvent event) {
		logger.info("Creating DB meneame");
		Connection conn = null;
		
		try {
			Class.forName("org.hsqldb.jdbcDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			ServletContext sc = event.getServletContext();
			//conn = DriverManager.getConnection("jdbc:hsqldb:mem:/localhost/pizzeria",//en memoria para pruebas en eclipse
			//Si se quiere tener la bd de forma f�sica en despliegue en tomcat hay que comentar la l�nea anterior y descomentar la siguiente, tomcat deber�a crearnos dentro del WEB-INF de despliegue la carpeta dbpizzeria si no existe 
			conn = DriverManager.getConnection("jdbc:hsqldb:file:" + sc.getRealPath("WEB-INF/meneamedb/"),							
					"sa",                     // username
					"");					  //password
			
			Statement stmt = conn.createStatement();
			//Init db schema
			try{
				
				stmt.executeUpdate("CREATE TABLE IF NOT EXISTS User (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,"
						+ "NAME VARCHAR(40) NOT NULL, "
						+ "PASSWORD VARCHAR(40) NOT NULL, "
						+ "EMAIL VARCHAR(50) NOT NULL)" );
				stmt.executeUpdate("CREATE TABLE IF NOT EXISTS News (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, "
						+ "OWNER INTEGER NOT NULL, "
						+ "DATESTAMP DATE default now,"
						+ "TIMESTAMP TIME default '00:00:00',"
						+ "TITLE VARCHAR(150) NOT NULL, "
						+ "TEXT  VARCHAR(400) NOT NULL, "
						+ "URL  VARCHAR(150) NOT NULL, "
						+ "CATEGORY VARCHAR(20) NOT NULL, "
						+ "LIKES INTEGER default 0, "
						+ "HITS INTEGER default 0, "
						+ "FOREIGN KEY (OWNER) REFERENCES USER(ID) ON DELETE CASCADE)" );
				stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Comment (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, "
						+ "OWNER INTEGER NOT NULL, "
						+ "NEWS INTEGER NOT NULL, "
						+ "DATESTAMP DATE default now,"
						+ "TIMESTAMP TIME default '00:00:00',"
						+ "TEXT  VARCHAR(400) NOT NULL, "
						+ "LIKES INTEGER default 0, "
						+ "FOREIGN KEY (OWNER) REFERENCES USER(ID) ON DELETE CASCADE," 
						+ "FOREIGN KEY (NEWS) REFERENCES NEWS(ID) ON DELETE CASCADE)" );
				
			}catch(SQLException e) {
				e.printStackTrace();
			}
			
			//init data
			stmt.executeUpdate("INSERT INTO User (name, password, email) SELECT 'vader', 'anakin', 'darth.vader@darksideoftheforce.org' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from User where name='vader')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO User (name, password, email) SELECT 'doe', 'john', 'jdoe@nothing.es' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from User where name='doe')  LIMIT 1");
			
			
			
			stmt.executeUpdate("INSERT INTO News (owner,title,text,url,category) "
					+ "SELECT 0,'Emperador de EEUU o Rey de Alemania: personajes que se atribuyeron un cargo rimbombante por la cara',"
					+ "'De toda la vida ha habido gente a la que le han dado un cargo de autoridad y lo ha ejercido con orgullo. El poder atrae, y por eso tambi�n hay quienes, a pesar de no haber recibido cargo alguno, se han autoproclamado sultanes, gobernadores o emperadores de la forma m�s extravagante posible.',"
					+ "'http://www.cookingideas.es/by-the-face-20160307.html','ocio' "
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from News where id=0)  LIMIT 1");
			stmt.executeUpdate("INSERT INTO News (owner,title,text,url,category) "
					+ "SELECT 1,'Un dron de Hacienda descubre 2.500 viviendas ilegales en Menorca',"
					+ "'Un dron de Hacienda descubre 2.500 viviendas irregulares en Menorca, isla verde que es Reserva de la Biosfera desde 1993. La cifra no incluye las posibles irregularidades urban�sticas en los pueblos de Sant Llu�s, Ma� y Ciutadella, ya que o no se dispone de datos o a�n se est�n procesando.',"
					+ "'http://www.cronicaglobal.com/es/notices/2016/03/un-dron-de-hacienda-descubre-2.500-viviendas-ilegales-en-menorca-34556.php','actualidad' "
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from News where id=1)  LIMIT 1");
			stmt.executeUpdate("INSERT INTO News (owner,title,text,url,category) "
					+ "SELECT 0,'Darth Maul - Aprendiz (Un Fan-Film de Star Wars)',"
					+ "'Como la mayor�a de los fans de Star Wars, el director de cine con sede en Alemania Shawn Bu pens� que Darth Maul, el malo en Star Wars: Episodio I - La Amenaza Fantasma, merec�a m�s tiempo en pantalla. Para ayudar a solucionar este problema, Shawn y su equipo pasaron casi dos a�os la creaci�n de este cortometraje.',"
					+ "'https://www.youtube.com/watch?v=Djo_91jN3Pk','ocio' "
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from News where id=2)  LIMIT 1");
						
			stmt.executeUpdate("INSERT INTO Comment (owner,news,text) "
					+ "SELECT 1,0,'Ha habido cada t�o raro con ansias de aparentar' "
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Comment where id=0)  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Comment (owner,news,text) "
					+ "SELECT 0,0,'Ya te digo' "
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Comment where id=1)  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Comment (owner,news,text) "
					+ "SELECT 0,1,'Y los dem�s pagando todos los permisos...' "
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Comment where id=2)  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Comment (owner,news,text) "
					+ "SELECT 1,1,'Hay gente con mucha cara' "
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Comment where id=3)  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Comment (owner,news,text) "
					+ "SELECT 0,1,'Y tanto' "
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Comment where id=4)  LIMIT 1");

			
			//store db connection object into ServletContext
			
			sc.setAttribute("dbConn", conn);
			
		} catch (SQLException e) {
			e.printStackTrace();
			
		}                     
		
		logger.info("DB created");
		
	}

	/**
     * @see ServletContextListener#contextDestroyed(ServletContextEvent)
     */
    public void contextDestroyed(ServletContextEvent arg0)  { 
         // TODO Auto-generated method stub
    	try {
    		logger.info("DB shutdown start");
    		ServletContext sc = arg0.getServletContext();
    		Connection conn = (Connection) sc.getAttribute("dbConn");
			Statement stmt = conn.createStatement();
			stmt.executeUpdate("SHUTDOWN COMPACT");
			logger.info("DB shutdown done");	
			conn.close();
			logger.info("DB connection closed");

			Enumeration<Driver> drivers = DriverManager.getDrivers();
			while (drivers.hasMoreElements()) {
				logger.info("DB deregistering drivers ");
				Driver driver = drivers.nextElement();
				try {
					DriverManager.deregisterDriver(driver);
					logger.info(String.format("deregistering jdbc driver: %s", driver));
				} catch (SQLException e) {
					logger.severe(String.format("Error deregistering driver %s %s", driver, e));
				}

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
}
