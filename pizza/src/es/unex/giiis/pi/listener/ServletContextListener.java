package es.unex.giiis.pi.listener;


import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Enumeration;
import java.util.logging.Logger;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.annotation.WebListener;



/**
 * Application Lifecycle Listener implementation class ServletContextListener
 *
 */
@WebListener
public class ServletContextListener implements javax.servlet.ServletContextListener {
	
	private static final Logger logger = Logger.getLogger(ServletContextListener.class.getName());
	
	

    /**
     * Default constructor. 
     */
    public ServletContextListener() {
        // TODO Auto-generated constructor stub
    }

	/**
     * @see ServletContextListener#contextInitialized(ServletContextEvent)
     */
    public void contextInitialized(ServletContextEvent event) {
		logger.info("Creating DB");
		Connection conn = null;
		
		try {
			Class.forName("org.hsqldb.jdbcDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			ServletContext sc = event.getServletContext();
			//conn = DriverManager.getConnection("jdbc:hsqldb:mem:/localhost/pizzeria",//en memoria para pruebas en eclipse
			//Si se quiere tener la bd de forma física en despliegue en tomcat hay que comentar la línea anterior y descomentar la siguiente, tomcat debería crearnos dentro del WEB-INF de despliegue la carpeta dbpizzeria si no existe 
			conn = DriverManager.getConnection("jdbc:hsqldb:file:" + sc.getRealPath("WEB-INF/pizzeriadb/"),							
					"sa",                     // username
					"");					  //password
			
			Statement stmt = conn.createStatement();
			
			//Init db schema
			try{
				
				stmt.executeUpdate("CREATE TABLE IF NOT EXISTS PizzaOrder (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,"
						+ "NAME VARCHAR(40) NOT NULL,"
						+ "TEL VARCHAR(20),"
						+ "EMAIL VARCHAR(50),"
						+ "SIZE VARCHAR (15),"
						+ "TOPPINGS VARCHAR(30),"
						+ "DELIVERY VARCHAR(10),"
						+ "COMMENTS VARCHAR (1000))" );
				
			}catch(SQLException e) {
				e.printStackTrace();
			}
			
			//init data
			stmt.executeUpdate("INSERT INTO PizzaOrder (name,tel,email,size,toppings,delivery,comments) select 'John Doe','+34 927251673','jdoe@unex.es','extralarge','bacon cheese onion mushroom','15:30','El cliente no tiene hambre, lo siguiente...' from INFORMATION_SCHEMA.TABLES where not exists (select  * from PizzaOrder where email='jdoe@unex.es') LIMIT 1");

			
			//store db connection object into ServletContext
			
			sc.setAttribute("dbConn", conn);
			
		} catch (SQLException e) {
			e.printStackTrace();
			
		}                     
		
		logger.info("DB created");
		
	}

	/**
     * @see ServletContextListener#contextDestroyed(ServletContextEvent)
     */
    public void contextDestroyed(ServletContextEvent arg0)  { 
         // TODO Auto-generated method stub
    	try {
    		logger.info("DB shutdown start");
    		ServletContext sc = arg0.getServletContext();
    		Connection conn = (Connection) sc.getAttribute("dbConn");
			Statement stmt = conn.createStatement();
			stmt.executeUpdate("SHUTDOWN COMPACT");
			logger.info("DB shutdown done");	
			conn.close();
			logger.info("DB connection closed");

			Enumeration<Driver> drivers = DriverManager.getDrivers();
			while (drivers.hasMoreElements()) {
				logger.info("DB deregistering drivers ");
				Driver driver = drivers.nextElement();
				try {
					DriverManager.deregisterDriver(driver);
					logger.info(String.format("deregistering jdbc driver: %s", driver));
				} catch (SQLException e) {
					logger.severe(String.format("Error deregistering driver %s %s", driver, e));
				}

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
}
